<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--映射具体interface-->
<mapper namespace="com.benjamin.dao.EmployeeDao">

    <!--
    结果集Map
    id：结果标识
    type：结果类型
        id：主键
        result：非主键其他元素
        association：当前对象，关联外键一个对象
        collection：当前对象，关联一个集合

        constructor：构造方法赋值
            idArg：同id主键
            arg：同非id主键

        property：对象字段映射名称
        column：数据库字段名称
    -->
    <resultMap id="employee" type="com.benjamin.bean.Employee">

        <!--使用构造方法赋值-->
        <!--<constructor>-->
        <!--<idArg column="id" javaType="int"/>-->
        <!--<arg column="name" javaType="String"/>-->
        <!--<arg column="phone" javaType="String"/>-->
        <!--<arg column="identity" javaType="String"/>-->
        <!--</constructor>-->

        <!--普通set方法赋值-->
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="phone" column="phone"/>
        <result property="identity" column="identity"/>
        <association property="department" javaType="com.benjamin.bean.Department">
            <id property="id" column="id"/>
            <result property="dname" column="dname"/>
        </association>
    </resultMap>

    <!--
    select
    id：接口下的方法名称
    resultType：结果返回用对象类型
    resultMap：结果返回用Map类型
    flushCache：语句被调用，会清空缓存
    useCache：语句被调用，会使用缓存，select元素默认true
    timeout：数据库返回超出设定秒数，抛异常
    statementType：
         STATEMENT：拼接，存在sql注入。对查询语句、传入参数
         PREPARED：预编译，不会sql注入。对查询语句进行预编译，语句带"？"
         CALLABLE：存储过程

    方式1：
    -->
    <select id="findByIdJoin" resultMap="employee">
        select * from t_employee e
        LEFT JOIN t_department d on e.department_id = d.id
        where e.id = #{id}
    </select>

    <!--
    方式2：使用association下的select标签
    -->
    <resultMap id="employeeSelect" type="com.benjamin.bean.Employee">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="phone" column="phone"/>
        <result property="identity" column="identity"/>
        <association property="department" column="department_id" select="com.benjamin.dao.DepartmentDao.findByIdSelect"/>
    </resultMap>
    <select id="findByIdSelect" resultMap="employeeSelect">
        select * from t_employee WHERE id = #{id}
    </select>


    <!--
    查询所有，返回集合resultType选择对象类型即可
    -->
    <select id="findAll" resultType="com.benjamin.bean.Employee">
        select * from t_employee
    </select>

    <!--
    动态sql：
        where标签：若and、or写在条件前面，则会自动去除多余的and、or；若and、or写在后面，不能自动识别去除
        if标签：支持条件动态拼接sql
    -->
    <select id="findAllByIf" resultType="com.benjamin.bean.Employee">
        SELECT * from t_employee
        <where>
            <if test="id !=null">
                id = #{id}
            </if>
            <if test="name !=null">
                and name = #{name}
            </if>
            <if test="identity != null">
                and identity = #{identity}
            </if>
            <if test="phone !=null">
                and phone = #{phone}
            </if>
            <if test="department !=null">
                and department_id = #{department.id}
            </if>
        </where>
    </select>

    <!--
    动态sql
        下面组合同java的switch语法
            choose标签
            when标签
            otherwise标签
    -->
    <select id="findAllByChoose" resultType="com.benjamin.bean.Employee">
        SELECT * from t_employee
        <where>
            <choose>
                <when test="id !=null">
                    id = #{id}
                </when>
                <when test="name !=null">
                    and name =#{name}
                </when>
                <otherwise>
                    and phone =#{phone}
                </otherwise>
            </choose>
        </where>
    </select>

    <!--
    动态sql
    trim标签：自定义截取多余的前缀/后缀
        prefix：条件块头部，拼接前缀
        suffix：条件块尾部，拼接后缀
        prefixOverrides：若符号写在条件前面，截掉多余的指定符号，若多个符号用"|"分隔
        subffixOverrides：若符号写在条件后面，截掉多余的指定符号，若多个符号用"|"分隔
    -->
    <select id="findAllByTrim" resultType="com.benjamin.bean.Employee">
        SELECT * from t_employee
        <trim prefix="where" prefixOverrides="and | or" suffix="" suffixOverrides="and | or">
            <if test="id !=null ">
                id = #{id} and
            </if>
            <if test="name !=null">
                name = #{name} and
            </if>
            <if test="phone !=null">
                phone = #{phone} and
            </if>
        </trim>

    </select>

    <!--
    动态sql
    foreach标签
        collection：传入集合参数名称
        close：后缀符号，一般填右括号 "）"
        open：前缀符号，一般填左括号 "（"
        index：当前迭代序号
        item：当前迭代序号下的值
    -->
    <select id="findAllByIdForeach" resultType="com.benjamin.bean.Employee">
        SELECT * from t_employee
        WHERE id IN
        <foreach collection="ids" close=")" index="index" item="id" open="(" separator=",">
            #{id}
        </foreach>
    </select>
    <select id="findAllByNameForeach" resultType="com.benjamin.bean.Employee">
        SELECT * from t_employee
        WHERE name IN
        <foreach collection="names" close=")" index="index" item="name" open="(" separator=",">
            #{name}
        </foreach>
    </select>


    <!--
    insert, update, delete
    id：接口下的方法名称
    flushCache：语句被调用，会清空缓存
    timeout：数据库返回超出设定秒数，抛异常
    statementType：
         STATEMENT：拼接，存在sql注入。对查询语句、传入参数
         PREPARED：预编译，不会sql注入。对查询语句进行预编译，语句带"？"
         CALLABLE：存储过程
    useGeneratedKeys：使用数据库自增主键。MyBatis 使用 JDBC 的 getGeneratedKeys 方法来取出由数据库内部生成的主键
    keyProperty：数据库自增主键返回并赋值。一般与useGeneratedKeys同用，把自增主键值设置到返回对象属性中（如：id）

    问题：#{}与${}的区别？
    #{}：预编译方式
    ${}：拼接方式
    -->
    <insert id="save">
        insert into t_employee (id,name,phone,identity)
        values (#{id},#{name},#{phone},#{identity})
    </insert>

</mapper>